% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resolve_source_deficiency.R
\name{resolve_source_deficiency}
\alias{resolve_source_deficiency}
\title{Determine sources for clusters where they are absent.}
\usage{
resolve_source_deficiency(red.sites, graph, bias = "upstream")
}
\arguments{
\item{red.sites}{GRanges object which has been reduced to single nt positions
and contains the revmap from the original GRanges object. The object must
also contain a column for cluster membership (clusID) and a column for
abundance (fragLengths).}

\item{graph}{a directed graph built from the red.sites object. Each node
corresponds to a row in the red.sites object.}

\item{bias}{character either "upstream" or "downstream" dictates a bias
imposed on the analysis. Selecting one will preference the direction when
breaking redundant edges.}
}
\description{
Given a list of unique integration site positions (reduced
GRanges object) and a directed graph of connected components, this function
identifies clusters missing source nodes, the edges to remove based on the
bias, and then returns the edited graph.
}
\details{
\code{resolve_source_deficiency} returns a graph where each cluster has at
least one source.
}
\examples{
gr <- .generate_test_granges(stdev = 3)
red.sites <- reduce(
  flank(gr, -1, start = TRUE),
  min.gapwidth = 0L,
  with.revmap = TRUE)
red.sites$siteID <- seq(1:length(red.sites))
revmap <- as.list(red.sites$revmap)
red.sites$fragLengths <- sapply(revmap, length)
red.hits <- GenomicRanges::as.data.frame(
  findOverlaps(red.sites, maxgap = 1L, ignoreSelf = TRUE))
g <- make_empty_graph(n = length(red.sites), directed = TRUE) \%>\%
  add_edges(unlist(mapply(
    c, red.hits$queryHits, red.hits$subjectHits, SIMPLIFY = FALSE)))
red.sites$clusID <- clusters(g)$membership

resolve_source_deficiency(red.sites, g)

}
\author{
Christopher Nobles, Ph.D.
}

